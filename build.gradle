buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'

group = 'at.ezylot'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
    mavenCentral()

    flatDir {
        dirs 'lib'
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')

    implementation(files('lib/at.jku.iic.droplet.electric.simulator.jar'))

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

node {
    version = '10.16.0'
    download = true
}

task cleanTypescript(type: Delete) {
    delete fileTree("$buildDir/resources/main/static/scripts") {
        include '**/*.ts'
    }
}

task cleanScss(type: Delete) {
    delete fileTree("$buildDir/resources/main/static/styles") {
        include '**/*.scss'
        include '**/*.sass'
    }
}

task tsRun(type: NodeTask) {
    inputs.dir("$projectDir/src/main/resources/static/scripts/")
    outputs.dir("$buildDir/resources/main/static/scripts")
    dependsOn(npmInstall)
    args = []
    script = file("$projectDir/node_modules/typescript/bin/tsc")
}

task eslint(type: NodeTask) {
    dependsOn(npmInstall)
    args = [ "$projectDir/src/main/resources/static/scripts/**/*.ts" ]
    script = file("$projectDir/node_modules/eslint/bin/eslint.js")
}

task scssCompile(type: NodeTask) {
    inputs.dir("$projectDir/src/main/resources/static/styles/")
    outputs.dir("$buildDir/resources/main/static/styles")
    dependsOn(npmInstall)
    args = [
        "--recursive",
        "--output", "$buildDir/resources/main/static/styles",
        "--output-style", "compressed",
        //"--source-map", "true",
        "$projectDir/src/main/resources/static/styles/"
    ]
    script = file("$projectDir/node_modules/node-sass/bin/node-sass")
}

clean.delete << file('node_modules')


tasks.processResources {
    dependsOn(eslint, tsRun, scssCompile)
    finalizedBy(cleanScss, cleanTypescript)
}
